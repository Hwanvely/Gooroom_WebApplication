spring:
  profiles:
    group:
      dev:
        - h2
        - oauth
      prod:
        - mysql
        - oauth

---

spring:
  servlet:
    multipart:
      max-file-size: 20MB

  profiles:
    active: oauth

jwt:
  secretKey: U2ltcGxlQm9hcmQtSnVuc2VvLVNwcmluZ0Jvb3QtVXNpbmdTcHJpbmdTZWN1cml0eS0yMDIzLTA0LTA5LXN1bmRheS13aXRoLU1hY2tib29rQWlyLUFpcnBvZHNwcm8taXBob25lMTRwcm8taXBhZGFyaXI0Cg==
  access:
    expiration: 3600000 # 1시간(60분) (1000L(ms -> s) * 60L(s -> m) * 60L(m -> h))
    header: Authorization
  refresh:
    expiration: 1209600000 # (1000L(ms -> s) * 60L(s -> m) * 60L(m -> h) * 24L(h -> 하루) * 14(2주))
    header: Authorization-refresh
  cookie:
      path: /
      domain: www.gooroom.site

server:
  servlet:
    context-path: /api

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type: trace
    # org.apache.coyote.http11: debug # http 로그 정보
---
spring:
  config:
    activate:
      on-profile: h2

  datasource:
    url: jdbc:h2:tcp://localhost/~/gooroom
    username: sa
    password:
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: none
      default_batch_fetch_size: 100
    properties:
      hibernate:
        format_sql: true

imgPath:
    profile: /Users/junseo/Documents/Study/Gooroom_WebApplication/projectgooroom/src/main/resources/image/user/
    homePost: /Users/junseo/Documents/Study/Gooroom_WebApplication/projectgooroom/src/main/resources/image/homePost/

---
spring:
  config:
    activate:
      on-profile: mysql

  datasource:
    url: jdbc:mysql://gooroom-db.cwfs4j4gmmfx.ap-northeast-2.rds.amazonaws.com:3306/gooroom_db
    username: p3j1
    password: wjdghkswldkstndudwnstj
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop
      default_batch_fetch_size: 100
    properties:
      hibernate:
        format_sql: true
imgPath:
  profile: /user/
  homePost: /homepost/